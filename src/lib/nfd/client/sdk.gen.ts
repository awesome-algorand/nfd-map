// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import type {
  InfoInfoOpenapi3YamlData,
  InfoVersionData,
  InfoVersionResponse,
  NfdGetNfdData,
  NfdGetNfdResponse,
  NfdGetNfdError,
  NfdActivityData,
  NfdActivityResponse,
  NfdActivityError,
  NfdAnalyticsData,
  NfdAnalyticsResponse,
  NfdAnalyticsError,
  NfdBadgesData,
  NfdBadgesResponse,
  NfdBadgesError,
  NfdBlueskyLeadersData,
  NfdBlueskyLeadersResponse,
  NfdBlueskyLeadersError,
  NfdBrowseData,
  NfdBrowseResponse,
  NfdBrowseError,
  NfdConsensusLeadersData,
  NfdConsensusLeadersResponse,
  NfdConsensusLeadersError,
  NfdConsensusMetricsData,
  NfdConsensusMetricsResponse,
  NfdConsensusMetricsError,
  NfdContractLockData,
  NfdContractLockResponse,
  NfdContractLockError,
  NfdContractUpgradeData,
  NfdContractUpgradeResponse,
  NfdContractUpgradeError,
  NfdDonationsData,
  NfdDonationsResponse,
  NfdDonationsError,
  NfdGetQuoteData,
  NfdGetQuoteResponse,
  NfdGetQuoteError,
  NfdIsValidNfdData,
  NfdIsValidNfdResponse,
  NfdIsValidNfdError,
  NfdIsValidAsaData,
  NfdIsValidAsaResponse,
  NfdIsValidAsaError,
  NfdLinkAddressData,
  NfdLinkAddressResponse,
  NfdLinkAddressError,
  NfdUnlinkAddressData,
  NfdUnlinkAddressResponse,
  NfdUnlinkAddressError,
  NfdSetPrimaryAddressData,
  NfdSetPrimaryAddressResponse,
  NfdSetPrimaryAddressError,
  NfdSetPrimaryNfdData,
  NfdSetPrimaryNfdResponse,
  NfdSetPrimaryNfdError,
  NfdGetLookupData,
  NfdGetLookupResponse,
  NfdGetLookupError,
  NfdMintData,
  NfdMintResponse,
  NfdMintError,
  NfdGetNameSigData,
  NfdGetNameSigResponse,
  NfdGetNameSigError,
  NfdOfferData,
  NfdOfferResponse,
  NfdOfferError,
  NfdPostOfferToOwnerData,
  NfdPostOfferToOwnerResponse,
  NfdPostOfferToOwnerError,
  NfdPurchaseData,
  NfdPurchaseResponse,
  NfdPurchaseError,
  NfdRenewData,
  NfdRenewResponse,
  NfdRenewError,
  NfdRescindOfferData,
  NfdRescindOfferResponse,
  NfdRescindOfferError,
  NfdGetRevAddressSigData,
  NfdGetRevAddressSigResponse,
  NfdGetRevAddressSigError,
  NfdSegmentLeadersData,
  NfdSegmentLeadersResponse,
  NfdSegmentLeadersError,
  NfdSegmentLockData,
  NfdSegmentLockResponse,
  NfdSegmentLockError,
  NfdSuggestData,
  NfdSuggestResponse,
  NfdSuggestError,
  NfdTotalsData,
  NfdTotalsResponse,
  NfdTotalsError,
  NfdTwitterLeadersData,
  NfdTwitterLeadersResponse,
  NfdTwitterLeadersError,
  NfdUpdatePartialData,
  NfdUpdatePartialResponse,
  NfdUpdatePartialError,
  NfdUpdateAllData,
  NfdUpdateAllResponse,
  NfdUpdateAllError,
  NfdUpdateImageData,
  NfdUpdateImageResponse,
  NfdUpdateImageError,
  NfdGetNfdsForAddressesV2Data,
  NfdGetNfdsForAddressesV2Response,
  NfdGetNfdsForAddressesV2Error,
  NfdDonationLeadersV2Data,
  NfdDonationLeadersV2Response,
  NfdDonationLeadersV2Error,
  NfdDonationListV2Data,
  NfdDonationListV2Response,
  NfdDonationListV2Error,
  NfdSearchV2Data,
  NfdSearchV2Response,
  NfdSearchV2Error,
  NfdContractUpgradeV3Data,
  NfdContractUpgradeV3Response,
  NfdContractUpgradeV3Error,
  NfdVaultOptInLockData,
  NfdVaultOptInLockResponse,
  NfdVaultOptInLockError,
  NfdSendFromVaultData,
  NfdSendFromVaultResponse,
  NfdSendFromVaultError,
  NfdSendToVaultData,
  NfdSendToVaultResponse,
  NfdSendToVaultError,
  NfdVerifyConfirmData,
  NfdVerifyConfirmResponse,
  NfdVerifyConfirmError,
  NfdVerifyRequestData,
  NfdVerifyRequestResponse,
  NfdVerifyRequestError,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Download ./pubfiles/openapi3.yaml
 * YAML document containing the API swagger definition
 */
export const infoInfoOpenapi3Yaml = <ThrowOnError extends boolean = false>(
  options?: Options<InfoInfoOpenapi3YamlData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
    url: "/info/openapi3.yaml",
    ...options,
  });
};

/**
 * version info
 * Returns version information for the service
 */
export const infoVersion = <ThrowOnError extends boolean = false>(
  options?: Options<InfoVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InfoVersionResponse,
    unknown,
    ThrowOnError
  >({
    url: "/info/version",
    ...options,
  });
};

/**
 * Get a specific NFD by name or by its application ID
 * Get a specific NFD by name or by its application ID
 */
export const nfdGetNfd = <ThrowOnError extends boolean = false>(
  options: Options<NfdGetNfdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdGetNfdResponse,
    NfdGetNfdError,
    ThrowOnError
  >({
    url: "/nfd/{nameOrID}",
    ...options,
  });
};

/**
 * Fetch change activity for an NFD
 * Fetch change activity for an NFD, specifically general 'block-level' deltas for an NFD
 */
export const nfdActivity = <ThrowOnError extends boolean = false>(
  options: Options<NfdActivityData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdActivityResponse,
    NfdActivityError,
    ThrowOnError
  >({
    url: "/nfd/activity",
    ...options,
  });
};

/**
 * Fetch NFD analytics via various filters
 * Fetch NFD analytics via various filters
 */
export const nfdAnalytics = <ThrowOnError extends boolean = false>(
  options?: Options<NfdAnalyticsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdAnalyticsResponse,
    NfdAnalyticsError,
    ThrowOnError
  >({
    url: "/nfd/analytics",
    ...options,
  });
};

/**
 * Fetch badge information (donations/etc) for an NFD
 * Fetch badge information (ie: donations) for an NFD
 */
export const nfdBadges = <ThrowOnError extends boolean = false>(
  options: Options<NfdBadgesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdBadgesResponse,
    NfdBadgesError,
    ThrowOnError
  >({
    url: "/nfd/badges/{name}",
    ...options,
  });
};

/**
 * blueskyLeaders nfd
 * Get top bluesky influencers
 */
export const nfdBlueskyLeaders = <ThrowOnError extends boolean = false>(
  options?: Options<NfdBlueskyLeadersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdBlueskyLeadersResponse,
    NfdBlueskyLeadersError,
    ThrowOnError
  >({
    url: "/nfd/bluesky/leaders",
    ...options,
  });
};

/**
 * Browse NFDs via various filters
 */
export const nfdBrowse = <ThrowOnError extends boolean = false>(
  options?: Options<NfdBrowseData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdBrowseResponse,
    NfdBrowseError,
    ThrowOnError
  >({
    url: "/nfd/browse",
    ...options,
  });
};

/**
 * consensusLeaders nfd
 * Get top consensus leaders
 */
export const nfdConsensusLeaders = <ThrowOnError extends boolean = false>(
  options?: Options<NfdConsensusLeadersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdConsensusLeadersResponse,
    NfdConsensusLeadersError,
    ThrowOnError
  >({
    url: "/nfd/consensus/leaders",
    ...options,
  });
};

/**
 * consensusMetrics nfd
 * Get general metrics about Algorand consensus
 */
export const nfdConsensusMetrics = <ThrowOnError extends boolean = false>(
  options?: Options<NfdConsensusMetricsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdConsensusMetricsResponse,
    NfdConsensusMetricsError,
    ThrowOnError
  >({
    url: "/nfd/consensus/metrics",
    ...options,
  });
};

/**
 * contractLock nfd
 * Lock/Unlock an NFD contract - if locked, the contract can never being modified until unlocked again by the owner.
 */
export const nfdContractLock = <ThrowOnError extends boolean = false>(
  options: Options<NfdContractLockData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdContractLockResponse,
    NfdContractLockError,
    ThrowOnError
  >({
    url: "/nfd/contract/lock/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * contractUpgrade nfd
 * Request upgrade of a pre 2.11 NFD to 2.11 (going no further)
 */
export const nfdContractUpgrade = <ThrowOnError extends boolean = false>(
  options: Options<NfdContractUpgradeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdContractUpgradeResponse,
    NfdContractUpgradeError,
    ThrowOnError
  >({
    url: "/nfd/contract/upgrade/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * donations nfd
 * Fetch donation activity for an NFD, totalling amounts sent 'to' designated donation accounts
 */
export const nfdDonations = <ThrowOnError extends boolean = false>(
  options: Options<NfdDonationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdDonationsResponse,
    NfdDonationsError,
    ThrowOnError
  >({
    url: "/nfd/donations/{name}",
    ...options,
  });
};

/**
 * getQuote nfd
 * get price / carry cost to mint or rewnew an NFD (if existing)
 */
export const nfdGetQuote = <ThrowOnError extends boolean = false>(
  options: Options<NfdGetQuoteData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdGetQuoteResponse,
    NfdGetQuoteError,
    ThrowOnError
  >({
    url: "/nfd/getQuote/{name}",
    ...options,
  });
};

/**
 * isValidNFD nfd
 * Determines if specified NFD Application ID is authentic
 */
export const nfdIsValidNfd = <ThrowOnError extends boolean = false>(
  options: Options<NfdIsValidNfdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdIsValidNfdResponse,
    NfdIsValidNfdError,
    ThrowOnError
  >({
    url: "/nfd/isValid/{appID}",
    ...options,
  });
};

/**
 * isValidASA nfd
 * Determines if specified NFD NFT ASA ID is authentic NFD
 */
export const nfdIsValidAsa = <ThrowOnError extends boolean = false>(
  options: Options<NfdIsValidAsaData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdIsValidAsaResponse,
    NfdIsValidAsaError,
    ThrowOnError
  >({
    url: "/nfd/isValidASA/{asaID}",
    ...options,
  });
};

/**
 * linkAddress nfd
 * Link one or more addresses to an NFD, adding to the reverse-address lookups as well as to this NFD.  Sender must be owner, and each added address must be able to be signed for.
 */
export const nfdLinkAddress = <ThrowOnError extends boolean = false>(
  options: Options<NfdLinkAddressData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdLinkAddressResponse,
    NfdLinkAddressError,
    ThrowOnError
  >({
    url: "/nfd/links/addAddress/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * unlinkAddress nfd
 * UnLink one or more addresses to an NFD, adding to the reverse-address lookups as well as to this NFD.  Sender must be owner, and each added address must be able to be signed for.
 */
export const nfdUnlinkAddress = <ThrowOnError extends boolean = false>(
  options: Options<NfdUnlinkAddressData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdUnlinkAddressResponse,
    NfdUnlinkAddressError,
    ThrowOnError
  >({
    url: "/nfd/links/removeAddress/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * setPrimaryAddress nfd
 * Set which of the currently verified addresses should be the first in the list (swapping positions as necessary)
 */
export const nfdSetPrimaryAddress = <ThrowOnError extends boolean = false>(
  options: Options<NfdSetPrimaryAddressData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdSetPrimaryAddressResponse,
    NfdSetPrimaryAddressError,
    ThrowOnError
  >({
    url: "/nfd/links/setPrimaryAddress/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * setPrimaryNFD nfd
 * Set the specified NFD as the primary NFD to return for the specified address via its reverse lookup
 */
export const nfdSetPrimaryNfd = <ThrowOnError extends boolean = false>(
  options: Options<NfdSetPrimaryNfdData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdSetPrimaryNfdResponse,
    NfdSetPrimaryNfdError,
    ThrowOnError
  >({
    url: "/nfd/links/setPrimaryNFD/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Reverse Address lookup with results returned per address
 * Get the primary NFD for an address.  Must be verified address, or if allowUnverified is set, it may match against an unverified address
 */
export const nfdGetLookup = <ThrowOnError extends boolean = false>(
  options: Options<NfdGetLookupData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdGetLookupResponse,
    NfdGetLookupError,
    ThrowOnError
  >({
    url: "/nfd/lookup",
    ...options,
  });
};

/**
 * mint nfd
 * Mint a new NFD, with user buying specified NFD and paying for a prorated amount of time based on its yearly price.
 */
export const nfdMint = <ThrowOnError extends boolean = false>(
  options: Options<NfdMintData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdMintResponse,
    NfdMintError,
    ThrowOnError
  >({
    url: "/nfd/mint",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * getNameSig nfd
 * Returns NameSig address for an NFD name (usable for V1 only)
 */
export const nfdGetNameSig = <ThrowOnError extends boolean = false>(
  options: Options<NfdGetNameSigData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdGetNameSigResponse,
    NfdGetNameSigError,
    ThrowOnError
  >({
    url: "/nfd/nameSig/{name}",
    ...options,
  });
};

/**
 * offer nfd
 * Offer up an NFD for sale - specifying price and optionally an address it is reserved for.
 */
export const nfdOffer = <ThrowOnError extends boolean = false>(
  options: Options<NfdOfferData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdOfferResponse,
    NfdOfferError,
    ThrowOnError
  >({
    url: "/nfd/offer/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * postOfferToOwner nfd
 * Post an offer to buy to the owner of an NFD, offering up a particular amount with optional note for them to consider
 */
export const nfdPostOfferToOwner = <ThrowOnError extends boolean = false>(
  options: Options<NfdPostOfferToOwnerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdPostOfferToOwnerResponse,
    NfdPostOfferToOwnerError,
    ThrowOnError
  >({
    url: "/nfd/postOfferToOwner/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * purchase nfd
 * Purchase an NFD for sale - specifying buyer (to sign transaction) and price
 */
export const nfdPurchase = <ThrowOnError extends boolean = false>(
  options: Options<NfdPurchaseData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdPurchaseResponse,
    NfdPurchaseError,
    ThrowOnError
  >({
    url: "/nfd/purchase/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * renew nfd
 * Renew or extend the expiration of an NFD.  If current owner, renews at base price. If other owner, can take ownership but goes through reverse auction process for first 28 days where price drops to base price - with price being for 1 year
 */
export const nfdRenew = <ThrowOnError extends boolean = false>(
  options: Options<NfdRenewData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdRenewResponse,
    NfdRenewError,
    ThrowOnError
  >({
    url: "/nfd/renew",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * rescindOffer nfd
 * Rescind offer of sale. Claiming NFD back for self, and removing it for sale.
 */
export const nfdRescindOffer = <ThrowOnError extends boolean = false>(
  options: Options<NfdRescindOfferData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdRescindOfferResponse,
    NfdRescindOfferError,
    ThrowOnError
  >({
    url: "/nfd/rescindOffer/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * getRevAddressSig nfd
 * Returns RevAddress address for an NFD name (usable for V1 only)
 */
export const nfdGetRevAddressSig = <ThrowOnError extends boolean = false>(
  options: Options<NfdGetRevAddressSigData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdGetRevAddressSigResponse,
    NfdGetRevAddressSigError,
    ThrowOnError
  >({
    url: "/nfd/revAddressSig/{address}",
    ...options,
  });
};

/**
 * segmentLeaders nfd
 * Get top segment roots
 */
export const nfdSegmentLeaders = <ThrowOnError extends boolean = false>(
  options?: Options<NfdSegmentLeadersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdSegmentLeadersResponse,
    NfdSegmentLeadersError,
    ThrowOnError
  >({
    url: "/nfd/segment/leaders",
    ...options,
  });
};

/**
 * Lock/Unlock an NFD segment - specifying open price if unlocking
 * Lock/Unlock an NFD segment - if locked, the segment only allows minted names created by the segment owner.  If unlocked, anyone can mint off the segment for the price (in USD) the owner sets
 */
export const nfdSegmentLock = <ThrowOnError extends boolean = false>(
  options: Options<NfdSegmentLockData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdSegmentLockResponse,
    NfdSegmentLockError,
    ThrowOnError
  >({
    url: "/nfd/segment/lock/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * suggest nfd
 * Suggest NFDs to purchase
 */
export const nfdSuggest = <ThrowOnError extends boolean = false>(
  options: Options<NfdSuggestData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdSuggestResponse,
    NfdSuggestError,
    ThrowOnError
  >({
    url: "/nfd/suggest/{name}",
    ...options,
  });
};

/**
 * totals nfd
 * Fetch NFD summary data - results subject to change in the future
 */
export const nfdTotals = <ThrowOnError extends boolean = false>(
  options?: Options<NfdTotalsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdTotalsResponse,
    NfdTotalsError,
    ThrowOnError
  >({
    url: "/nfd/totals",
    ...options,
  });
};

/**
 * twitterLeaders nfd
 * Get top twitter influencers
 */
export const nfdTwitterLeaders = <ThrowOnError extends boolean = false>(
  options?: Options<NfdTwitterLeadersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdTwitterLeadersResponse,
    NfdTwitterLeadersError,
    ThrowOnError
  >({
    url: "/nfd/twitter/leaders",
    ...options,
  });
};

/**
 * updatePartial nfd
 * Set an attribute in an NFD on behalf of a particular sender (who must be the owner).  Can set user-defined fields, or clear verified fields (except v.ca*)
 */
export const nfdUpdatePartial = <ThrowOnError extends boolean = false>(
  options: Options<NfdUpdatePartialData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    NfdUpdatePartialResponse,
    NfdUpdatePartialError,
    ThrowOnError
  >({
    url: "/nfd/update/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * updateAll nfd
 * Replace all NFD user-settable attributes with those passed-in, removing, adding and replacing on behalf of a particular sender (who must be the owner).  Returns transaction group of transactions to sign
 */
export const nfdUpdateAll = <ThrowOnError extends boolean = false>(
  options: Options<NfdUpdateAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    NfdUpdateAllResponse,
    NfdUpdateAllError,
    ThrowOnError
  >({
    url: "/nfd/update/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * updateImage nfd
 * Update the avatar or banner image associated with an NFD by uploading new image content
 */
export const nfdUpdateImage = <ThrowOnError extends boolean = false>(
  options: Options<NfdUpdateImageData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdUpdateImageResponse,
    NfdUpdateImageError,
    ThrowOnError
  >({
    url: "/nfd/updateImage/{name}/{sender}/{which}",
    ...options,
  });
};

/**
 * Reverse Address lookup with results returned per address
 * Get all NFDs which have been explicitly linked to one or more verified [or unverified] Algorand address(es).  Unverified addresses will match but return as unverifiedCaAlgo array.  These should be treated specially and not have the same trust level as verified addresses as they can be falsely attributed.  The caAlgo array is what should be trusted for things like NFT creation addresses. For reverse lookups returning multiple NFDs, the first result should be used.
 */
export const nfdGetNfdsForAddressesV2 = <ThrowOnError extends boolean = false>(
  options: Options<NfdGetNfdsForAddressesV2Data, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdGetNfdsForAddressesV2Response,
    NfdGetNfdsForAddressesV2Error,
    ThrowOnError
  >({
    url: "/nfd/v2/address",
    ...options,
  });
};

/**
 * donationLeadersV2 nfd
 * Get top donors to a specific NFD Donation target
 */
export const nfdDonationLeadersV2 = <ThrowOnError extends boolean = false>(
  options: Options<NfdDonationLeadersV2Data, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdDonationLeadersV2Response,
    NfdDonationLeadersV2Error,
    ThrowOnError
  >({
    url: "/nfd/v2/donations/leaders/{name}",
    ...options,
  });
};

/**
 * donationListV2 nfd
 * Fetch list of tracked Donation NFD 'targets'.
 */
export const nfdDonationListV2 = <ThrowOnError extends boolean = false>(
  options?: Options<NfdDonationListV2Data, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdDonationListV2Response,
    NfdDonationListV2Error,
    ThrowOnError
  >({
    url: "/nfd/v2/donations/list",
    ...options,
  });
};

/**
 * Search NFDs via various filters
 * Search NFDs via various filters
 */
export const nfdSearchV2 = <ThrowOnError extends boolean = false>(
  options?: Options<NfdSearchV2Data, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NfdSearchV2Response,
    NfdSearchV2Error,
    ThrowOnError
  >({
    url: "/nfd/v2/search",
    ...options,
  });
};

/**
 * ContractUpgradeV3 nfd
 * Request upgrade of a 2.11 or 3.x NFD to 3.x+ (post renewals). First switch to 3.x will pay 1 year renewal fee
 */
export const nfdContractUpgradeV3 = <ThrowOnError extends boolean = false>(
  options: Options<NfdContractUpgradeV3Data, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdContractUpgradeV3Response,
    NfdContractUpgradeV3Error,
    ThrowOnError
  >({
    url: "/nfd/v3/contract/upgrade/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * vaultOptInLock nfd
 * Lock/Unlock ability for the specified NFD Vault to auto opt-in to assets, allowing airdrops from other accounts
 */
export const nfdVaultOptInLock = <ThrowOnError extends boolean = false>(
  options: Options<NfdVaultOptInLockData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdVaultOptInLockResponse,
    NfdVaultOptInLockError,
    ThrowOnError
  >({
    url: "/nfd/vault/lock/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * sendFromVault nfd
 * Send an amount of an asset [0 == ALGO] to another account FROM the NFD Vault.  Only owner of NFD can send.
 */
export const nfdSendFromVault = <ThrowOnError extends boolean = false>(
  options: Options<NfdSendFromVaultData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdSendFromVaultResponse,
    NfdSendFromVaultError,
    ThrowOnError
  >({
    url: "/nfd/vault/sendFrom/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * sendToVault nfd
 * Provide transaction to send an asset owned by sender account to an NFD vault.  Call to have opt-in to vault will be included if necessary.  Callable by NFD owner, or if Opt-in is UNLOCKED (or asset already opted-in), anyone can call
 */
export const nfdSendToVault = <ThrowOnError extends boolean = false>(
  options: Options<NfdSendToVaultData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdSendToVaultResponse,
    NfdSendToVaultError,
    ThrowOnError
  >({
    url: "/nfd/vault/sendTo/{name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * verifyConfirm nfd
 * Verify a particular piece of data on, or off-chain.  Each verification differs in its requirements
 */
export const nfdVerifyConfirm = <ThrowOnError extends boolean = false>(
  options: Options<NfdVerifyConfirmData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdVerifyConfirmResponse,
    NfdVerifyConfirmError,
    ThrowOnError
  >({
    url: "/nfd/verify/confirm/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * verifyRequest nfd
 * Request Verification for particular piece of data on, or off-chain.  Each verification differs in its requirements. Returns data to be used in challenge
 */
export const nfdVerifyRequest = <ThrowOnError extends boolean = false>(
  options: Options<NfdVerifyRequestData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    NfdVerifyRequestResponse,
    NfdVerifyRequestError,
    ThrowOnError
  >({
    url: "/nfd/verify/request",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};
